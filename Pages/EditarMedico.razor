@page "/editarmedico"
@using Microsoft.EntityFrameworkCore
@inject DialogService DialogService
@inject NotificationService NotificationService

<PageTitle>Edicion de medicos</PageTitle>

<h2>Lista de medicos</h2>


<RadzenRow class="" Gap="1rem"> 


    <RadzenColumn  Size="4" class="rz-p-2 rz-p-md-4">
        <div class="">
            <RadzenListBox @bind-Value=@medicoSeleccionado Data=@medicos TextProperty="NombreMedico" ValueProperty="NombreMedico" Style="width: 100%; max-width: 400px; height:200px" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select company" }})" />            
            <RadzenButton Click=@AgregarMedico Text="" Icon="add_circle" ButtonStyle="ButtonStyle.Primary" Width="30px" />
        </div>

    </RadzenColumn> 


    <RadzenColumn Size="8" class="r rz-p-2 rz-p-md-8">
        <RadzenStack Gap="1rem">
            <RadzenDataGrid @ref="ordersGrid" AllowFiltering="false" AllowPaging="true" PageSize="5" AllowSorting="true"
            Data="@diasYhorarios" TItem="Medico" RowUpdate="@OnUpdateRow" RowCreate="@OnCreateRow" ColumnWidth="200px">
                <HeaderTemplate>

                </HeaderTemplate>
                <Columns>
                    <RadzenDataGridColumn Visible="false" Property="Id" Title="ID">
                        <EditTemplate Context="med">
                            <RadzenDataGridColumn Property="Id" Title="ID"  Frozen="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="NombreMedico" Title="Medico">
                        <EditTemplate Context="med">
                            <RadzenTextBox @bind-Value="med.NombreMedico"  />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="diaTrabajo" Width="130px" Title="Dia">
                        <EditTemplate Context="med">
                            <RadzenTextBox @bind-Value="med.diaTrabajo"  />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="horaInicioTrabajo" Width="110px"  Title="Inicio">
                        <EditTemplate Context="med">
                            <RadzenTextBox @bind-Value="med.horaInicioTrabajo"  />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="horaFinTrabajo" Width="110px" Title="Fin">
                        <EditTemplate Context="med">
                            <RadzenTextBox @bind-Value="med.horaFinTrabajo"  />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Property="duracionTurno" Width="130px" Title="Duracion">
                        <EditTemplate Context="med">
                            <RadzenDataGridColumn Property="duracionTurno" Title="Duracion" Frozen="true" />
                        </EditTemplate>
                    </RadzenDataGridColumn>

                    <RadzenDataGridColumn Context="med" Filterable="false" Sortable="false" TextAlign="TextAlign.Right">
                        <Template Context="med">
                            <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Click="@(args => EditRow(med))" />
                            <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Click="@(args => DeleteRow(med))" />
                        </Template>
                        <EditTemplate Context="med">
                            <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Click="@((args) => SaveRow(med))" />
                            <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Click="@((args) => CancelEdit(med))" />
                        </EditTemplate>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
            <RadzenButton Click=@ReloadGrid Text="Ver horarios" Icon="add_circle" ButtonStyle="ButtonStyle.Info" Width="30px" />
            <RadzenButton Click=@InsertRow Text="Agregar nuevo horario" Icon="add_circle" ButtonStyle="ButtonStyle.Primary" Width="30px" />
        </RadzenStack>
    </RadzenColumn>
</RadzenRow>

@code
{
    string medicoSeleccionado = "";    

    RadzenDataGrid<Medico> ordersGrid;

    IEnumerable<Medico> medicos;
    List<Medico> listaMedicos = new List<Medico>();


    IEnumerable<Medico> diasYhorarios;
    List<Medico> listaHorarios = new List<Medico>();

    Medico nuevoHorarioMedico = new Medico();

    DateTime horaIni = DateTime.Today.AddHours(6);
    DateTime horaFin = DateTime.Today.AddHours(23);




    protected override async Task OnInitializedAsync()
    {
        string query = "SELECT idMedicos,nombreMedico,diaTrabajo,horaInicioTrabajo,horaFinTrabajo,duracionTurno FROM `turnos-medicos`.medicos;";
        listaMedicos = Base.SelectAMedicos(query);


        medicos = listaMedicos
                            .Select(m => m.NombreMedico) // Extrae solo los nombres
                            .Distinct() // Elimina duplicados
                            .Select(nombre => new Medico { NombreMedico = nombre }) // Crea nuevos objetos Medico con nombres únicos
                            .ToList();
    }

    async Task EditRow(Medico med)
    {
        if (ordersGrid == null) return;
        await ordersGrid.EditRow(med);
    }

    async Task SaveRow(Medico med)
    {
        if (ordersGrid == null) return;
        await ordersGrid.UpdateRow(med);
    }

    void CancelEdit(Medico med)
    {
        ordersGrid.CancelEditRow(med);
    }

    async Task DeleteRow(Medico med)
    {
        var result = await DialogService.OpenAsync("Atencion", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>Esta a punto de borrar el horario de : <b>@med.NombreMedico </b></p>
            <p>Dia:  <b>@med.diaTrabajo </b></p>
            <p>Hora inicio:  <b>@med.horaInicioTrabajo </b></p>
            <p>Hora fin:  <b>@med.horaFinTrabajo </b></p>
            <p><b>¿Desea continuar? </b></p>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">

                <RadzenButton Text="Confirmar" Click="@(args => DeleteABase(med.Id))" />
                    <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    );
    }


    async Task AgregarMedico()
    {
        List<String> dias = new List<string>() { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo" };
        IEnumerable<string> listaDias = dias;

        var result = await DialogService.OpenAsync("Nuevo medico", ds =>
        @<RadzenStack Gap="1.5rem">
            <p>Agregar un nuevo medico</p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">

                <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenLabel Text="Nombre del medico" Component="nombreMedico" />
                    <RadzenTextBox @bind-Value=medicoSeleccionado Style="width: 100%;" Name="nombreMedico" />
                </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenLabel Text="Dia" Component="Dias" />
                        <RadzenDropDown @bind-Value="nuevoHorarioMedico.diaTrabajo" Placeholder="Seleccionar un dia" Data="@listaDias" Style="width: 100%;" Name="Dias">
                            <RadzenRequiredValidator Component="Dias" Text="Elige un dia" />
                        </RadzenDropDown>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenLabel Text="Hora inicio:" Component="horaInicio" />
                    <RadzenDatePicker @bind-Value=@horaIni ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Name="horaInicio" />
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenLabel Text="Hora fin:" Component="horaFin" />
                    <RadzenDatePicker @bind-Value=@horaFin ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Name="horaFin" />
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenLabel Text="Duracion del turno:" Component="duracion" />
                    <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value=@nuevoHorarioMedico.duracionTurno Placeholder="Duracion del turno" NullValue="null" Name="duracion" />
                    <br />
                    </RadzenRow>
                        <RadzenButton Text="Confirmar" Click=InsertABase />
                        <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
            );
    }


    async Task InsertRow()
    {
        if (medicoSeleccionado!="") 
        { 
            List<String> dias = new List<string>() { "Lunes", "Martes", "Miercoles", "Jueves", "Viernes", "Sabado", "Domingo" };
            IEnumerable<string> listaDias = dias;

            var result = await DialogService.OpenAsync("Nuevo horario", ds =>
            @<RadzenStack Gap="1.5rem">
            <p>Crear nuevo horario para: <b>@medicoSeleccionado </b></p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenLabel Text="Dia" Component="Dias" />
                        <RadzenDropDown @bind-Value="nuevoHorarioMedico.diaTrabajo" Placeholder="Seleccionar un dia" Data="@listaDias" Style="width: 100%;" Name="Dias">
                            <RadzenRequiredValidator Component="Dias" Text="Elige un dia" />
                        </RadzenDropDown>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenLabel Text="Hora inicio:" Component="horaInicio" />
                    <RadzenDatePicker @bind-Value=@horaIni ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Name="horaInicio" />
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenLabel Text="Hora fin:" Component="horaFin" />
                    <RadzenDatePicker @bind-Value=@horaFin ShowTime="true" TimeOnly="true" DateFormat="HH:mm" Name="horaFin" />
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                    <RadzenLabel Text="Duracion del turno:" Component="duracion" />
                    <RadzenNumeric ShowUpDown="false" TValue="int" @bind-Value=@nuevoHorarioMedico.duracionTurno Placeholder="Duracion del turno" NullValue="null" Name="duracion" />
                    <br />
                    </RadzenRow>
                        <RadzenButton Text="Confirmar" Click=InsertABase />
                        <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
    );
        }
        else
        {
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Atencion", Detail = "Selecciona un medico" });
        }



    }

    void OnUpdateRow(Medico med)
    {
        listaHorarios[listaHorarios.FindIndex(m => m.Id == med.Id)] = med;
        diasYhorarios = new List<Medico>(listaHorarios);
    }

    void OnCreateRow(Medico med)
    {
        med.Id = listaHorarios.Count + 1;
        listaHorarios.Add(med);
        diasYhorarios = new List<Medico>(listaHorarios);
    }

    async Task ReloadGrid()
    {
        string query = "";

        if(medicoSeleccionado=="")
        {
            query = "SELECT idMedicos,nombreMedico,diaTrabajo,horaInicioTrabajo,horaFinTrabajo,duracionTurno FROM `turnos-medicos`.medicos;";      
        }
        else
        {
            query = "SELECT idMedicos,nombreMedico,diaTrabajo,horaInicioTrabajo,horaFinTrabajo,duracionTurno FROM `turnos-medicos`.medicos WHERE nombreMedico='"+medicoSeleccionado+"';";           
        }        
        diasYhorarios = Base.SelectAMedicos(query);
        await ordersGrid.Reload();

    }
    void InsertABase()
    {
        if (nuevoHorarioMedico.diaTrabajo!="" && nuevoHorarioMedico.duracionTurno!=0)
        {
            string horaInicio = horaIni.ToString("HH:mm");
            string horaFinal = horaFin.ToString("HH:mm");

            string query = "INSERT INTO `turnos-medicos`.`medicos` (`nombreMedico`,`diaTrabajo`,`horaInicioTrabajo`,`horaFinTrabajo`,`duracionTurno`)VALUES('" + medicoSeleccionado + "','" + nuevoHorarioMedico.diaTrabajo + "','" + horaInicio + "','" + horaFinal + "'," + nuevoHorarioMedico.duracionTurno + ");";
            int insertarNuevohorario = Base.ConexionBase(query);

            if (insertarNuevohorario == 0)
            {
                DialogService.Close(); // Cierra el diálogo
                NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "OK", Detail = "Horario agregado" });
                OnInitializedAsync();
                ReloadGrid();
            }
            else
            {
                Console.WriteLine("error");
            }
        }
        else
        {                    
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "Atencion", Detail = "Completa todos los campos" });
        }

    }

    void DeleteABase(int idABorrar)
    {
        string query = "DELETE FROM `turnos-medicos`.`medicos` WHERE idMedicos="+idABorrar+";";
        int borrarFila = Base.ConexionBase(query);
        if (borrarFila == 0)
        {
            DialogService.Close(); // Cierra el diálogo
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "OK", Detail = "Horario borrado" });
            OnInitializedAsync();
            ReloadGrid();
        }
        else
        {
            Console.WriteLine("error borrando el horario");
        }
    }
}

     