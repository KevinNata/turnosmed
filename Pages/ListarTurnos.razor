@page "/listarturnos"
@inject DialogService DialogService
@inject NavigationManager Navigation
@inject DialogService DialogService
@inject NotificationService NotificationService


<PageTitle>Listado de turnos reservados</PageTitle>

<h2>Listado de turnos reservados</h2>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Gap="0.5rem" class="rz-p-sm-12">
    <RadzenLabel Text="Seleccionar médico" Component="DropDownBindValue" />
    <RadzenDropDown @bind-Value="medicoSeleccionado" Placeholder="Seleccionar" Data="@listaMedicos" Style="width: 30%;" TextProperty="NombreMedico" ValueProperty="NombreMedico" Name="Medico">
        <RadzenRequiredValidator Component="Medico" Text="Debes seleccionar un médico" />
    </RadzenDropDown>
    <RadzenButton Click=@ReloadGrid Text="Ver turnos" Icon="visibility" ButtonStyle="ButtonStyle.Base" />
</RadzenStack>

<RadzenColumn Size="12" SizeMd="8" class="rz-p-2 rz-p-md-8" Style="margin-bottom: 4rem;">
    <RadzenStack Gap="1.5rem">
        <RadzenDataGrid @ref="turnosGrid"
                        AllowFiltering="true"
                        FilterMode="FilterMode.Simple"
                        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        AllowPaging="true"
                        PageSize="5"
                        AllowSorting="true"
                        Data="@turnos"
                        TItem="Turno"
                        ColumnWidth="200px"
                        Style="width: 100%; max-width: 1600px; border-radius: 8px; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);">
            <Columns>
                <RadzenDataGridColumn Property="NombrePaciente" Title="Nombre" Width="200px">
                    <EditTemplate Context="shift">
                        <RadzenTextBox @bind-Value="shift.NombrePaciente" Style="width: 100%; border-radius: 5px;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Property="ApellidoPaciente" Title="Apellido" Width="150px">
                    <EditTemplate Context="shift">
                        <RadzenTextBox @bind-Value="shift.ApellidoPaciente" Style="width: 100%; border-radius: 5px;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Property="Dni" Title="DNI" Width="120px">
                    <EditTemplate Context="shift">
                        <RadzenNumeric TValue="int?" @bind-Value="shift.Dni" Style="width: 100%; border-radius: 5px;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Property="Cobertura" Title="Cobertura" Width="150px">
                    <EditTemplate Context="shift">
                        <RadzenTextBox @bind-Value="shift.Cobertura" Style="width: 100%; border-radius: 5px;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Property="Medico" Title="Médico" Width="150px">
                    <EditTemplate Context="shift">
                        <RadzenTextBox @bind-Value="shift.Medico" Style="width: 100%; border-radius: 5px;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Property="FechaTurno" Title="Fecha" Width="130px">
                    <Template Context="shift">
                        @shift.FechaTurno.ToString("dd/MM/yyyy")
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Property="HoraTurno" Title="Hora" Width="130px">
                    <EditTemplate Context="shift">
                        <RadzenTextBox @bind-Value="shift.HoraTurno" Style="width: 100%; border-radius: 5px;" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn Context="shift" Filterable="false" Sortable="false" Title="Notas" TextAlign="TextAlign.Left" Width="90px">
                    <Template Context="shift">
                        @if (!string.IsNullOrEmpty(shift.Notas))
                        {
                            <RadzenButton Click=@(args => VerNotas(shift.Notas))
                                          Text="Ver"
                                          Size="ButtonSize.Small"
                                          ButtonStyle="ButtonStyle.Info"
                                           />
                        }
                    </Template>
                </RadzenDataGridColumn>
                

                <RadzenDataGridColumn Context="shift" Filterable="false" Sortable="false" TextAlign="TextAlign.Left" Width="90px">
                    <Template Context="shift">
                        <RadzenButton Icon="build"
                                      ButtonStyle="ButtonStyle.Success"
                                      Size="ButtonSize.Small"
                                      Click="@(args => EditarTurno(shift.Id))" />
                        <RadzenButton Icon="delete"
                                      ButtonStyle="ButtonStyle.Danger"
                                      Size="ButtonSize.Small"
                                      Click="@(args => DeleteRow(shift))" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenStack>
</RadzenColumn>


@code
{
    string medicoSeleccionado = "";
    List<Medico> listaMedicos = Medico.ObtenerMedicos();



    Turno turno = new Turno() { };

    RadzenDataGrid<Turno> turnosGrid;

    IEnumerable<Turno> turnos;

    protected override async Task OnInitializedAsync()
    {
        listaMedicos.Add(new Medico() { NombreMedico = "Todos" });
    }


    async Task DeleteRow(Turno shift)
    {
        var result = await DialogService.OpenAsync("Atención", ds =>
        @<RadzenStack Gap="1.5rem">
        <p>Está a punto de cancelar el turno de : <b>@shift.NombrePaciente @shift.ApellidoPaciente</b></p>
        <p>Día:  <b>@shift.FechaTurno.ToString("dd/MM/yyyy") </b></p>
        <p>Hora:  <b>@shift.HoraTurno </b></p>
        <p>Médico:  <b>@shift.Medico </b></p>

        <p><b>¿Desea continuar? </b></p>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Confirmar" Click="@(args => DeleteABase(shift.Id))" />
                    <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
    );
    }

    void DeleteABase(int idABorrar)
    {
        string query = "DELETE FROM `turnos-medicos`.`turnos` WHERE idTurno=" + idABorrar + ";"; 
        int borrarFila = Base.ConexionBase(query);
        if (borrarFila == 0)
        {
            DialogService.Close(); // Cierra el diálogo
            NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Info, Summary = "OK", Detail = "Turno cancelado" });
            ReloadGrid();
        }
        else
        {
            Console.WriteLine("error borrando el turno");
        }
    }

    async Task ReloadGrid()
    {
        string query = "";

        if (medicoSeleccionado == "" || medicoSeleccionado=="Todos" )
        {
            query = "SELECT idturno,nombrePaciente,apellidoPaciente,dni,cobertura,medico,fechaTurno,horaTurno,notas FROM `turnos-medicos`.turnos;";
        }
        else
        {
            query = "SELECT idturno,nombrePaciente,apellidoPaciente,dni,cobertura,medico,fechaTurno,horaTurno,notas FROM `turnos-medicos`.turnos WHERE medico='" + medicoSeleccionado + "';";
        }
        turnos = Base.SelectATurnos(query);

        await turnosGrid.Reload();

    }

    async Task VerNotas(string nota)
    {
        var result = await DialogService.OpenAsync("Nota adjunta", ds =>
        @<RadzenStack Gap="1.5rem">
            <p><b>El turno tiene la siguiente nota:</b></p>
            <p> @nota </p>
            <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenButton Text="Cerrar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                </RadzenStack>
            </RadzenStack>
        </RadzenStack>
        );

    }

    
    private void EditarTurno(int id)
    {
        Navigation.NavigateTo($"/editarturno/{id}");
    }
}

