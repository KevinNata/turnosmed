@page "/reservarturno"
@inject DialogService DialogService
@inject NavigationManager Navigation


<PageTitle>Reservar turno</PageTitle>

<h2>Reservar un turno</h2>

<RadzenTemplateForm Data="@nuevoTurno" Submit="@((Turno args) => { Submit(args); })">
    <RadzenRow Gap="1.5rem" class="rz-p-0 rz-p-lg-4">
        <!-- Primera Columna -->
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenFieldset Text="Datos del Paciente">
                <RadzenStack Gap="1rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Nombre" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox @bind-Value="nuevoTurno.NombrePaciente" Name="NombrePaciente" Style="width: 100%;" />
                            <RadzenRequiredValidator Component="NombrePaciente" Text="Por favor, completa el nombre." />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Apellido" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox @bind-Value="nuevoTurno.ApellidoPaciente" Name="ApellidoPaciente" Style="width: 100%;" />
                            <RadzenRequiredValidator Component="ApellidoPaciente" Text="Por favor, completa el apellido." />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="DNI" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenNumeric ShowUpDown="false" Placeholder="Ingrese su doc." Name="DNI" Style="width: 100%;" @bind-Value="nuevoTurno.Dni" />
                            <RadzenRequiredValidator Component="DNI" Text="Completa el DNI del paciente." />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Teléfono" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox @bind-Value="nuevoTurno.Telefono" Name="Telefono" Style="width: 100%;" />
                            <RadzenRequiredValidator Component="Telefono" Text="Por favor, completa el teléfono." />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Domicilio" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox @bind-Value="nuevoTurno.Domicilio" Name="Domicilio" Style="width: 100%;" />
                            <RadzenRequiredValidator Component="Domicilio" Text="Por favor, completa el domicilio." />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Email" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox @bind-Value="nuevoTurno.Email" Name="Email" Style="width: 100%;" />
                            <RadzenRequiredValidator Component="Email" Text="Por favor, completa el email." />
                        </RadzenColumn>
                    </RadzenRow>

                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>

        <!-- Segunda Columna -->
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenFieldset Text="Detalles del turno">
                <RadzenStack Gap="1rem">
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Médico" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown @bind-Value="nuevoTurno.Medico" Name="Medico" Placeholder="Selecciona un médico" Data="@listaMedicos" Style="width: 100%;" TextProperty="NombreMedico" ValueProperty="NombreMedico">
                                <RadzenRequiredValidator Component="Medico" Text="Debes seleccionar un médico." />
                            </RadzenDropDown>
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Cobertura" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDropDown @bind-Value="nuevoTurno.Cobertura"  Name="Cobertura" Placeholder="Selecciona una cobertura" Data="@listaCoberturas" Style="width: 100%;" TextProperty="NombreCobertura" ValueProperty="NombreCobertura">
                                <RadzenRequiredValidator Component="Cobertura" Text="Debes seleccionar una cobertura." />
                            </RadzenDropDown>
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Fecha del turno" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenDatePicker @bind-Value=@nuevoTurno.FechaTurno Name="FechasPosibles" DateFormat="d/M/yyyy" Disabled="true" Style="width:45%;" />
                            <RadzenButton Text="Ver fechas" ButtonStyle="ButtonStyle.Secondary" Style="width:50%;" Click=@MostrarFechasDisponibles />
                            <RadzenRequiredValidator Component="FechasPosibles" Text="Debes seleccionar una fecha." />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Hora del turno" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox @bind-Value=@nuevoTurno.HoraTurno Name="Horarios" Disabled="true" Style="width:45%;" />
                            <RadzenButton Text="Ver horarios" ButtonStyle="ButtonStyle.Secondary" Style="width:50%;" Click=@MostrarHorariosDisponibles />
                            <RadzenRequiredValidator Component="Horarios" Text="Debes seleccionar un horario." />
                        </RadzenColumn>
                    </RadzenRow>

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12">
                            <RadzenLabel Text="Notas" />
                            <RadzenTextBox @bind-Value=@nuevoTurno.Notas Name="Notas" MaxLength="500" Style="width: 100%; height: 100px;" />
                        </RadzenColumn>
                    </RadzenRow>

                </RadzenStack>
            </RadzenFieldset>
        </RadzenColumn>

    </RadzenRow>

    <!-- Botones centrados -->
    <RadzenRow JustifyContent="JustifyContent.Center" class="rz-mt-4">
        <RadzenButton ButtonType="ButtonType.Submit" Click=@MostrarConfirmacion Size="ButtonSize.Large" Icon="save" Text="Confirmar" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Cancelar" Click="@Cancelar" />
    </RadzenRow>
</RadzenTemplateForm>

<br />

@code {


    Turno nuevoTurno = new Turno(){};

    List<Cobertura> listaCoberturas = Cobertura.ObtenerCoberturas();

    List<Medico> listaMedicos = Medico.ObtenerMedicos();

    async Task MostrarFechasDisponibles()
    {

        if(nuevoTurno.Medico!="")
        {
            var result = await DialogService.OpenAsync("Elegir una fecha", ds =>
            @<RadzenStack Gap="1.5rem">
                <p><b>Fechas disponibles:</b></p>
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem" >
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
                            <RadzenLabel Text="Seleccionar" Component="FechasPosibles" />
                            <RadzenDatePicker @bind-Value=@nuevoTurno.FechaTurno DateRender=@nuevoTurno.DesactivarFechas DateFormat="d/M/yyyy" Name="FechasPosibles" />
                    </RadzenStack>
                <br />
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                        <RadzenButton Text="Confirmar" Click="() => ds.Close(true)" />
                        <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
            );
        }
        else
        {
            var result = await DialogService.OpenAsync("Primero debes elegir un medico.", ds =>
            @<RadzenStack Gap="1.5rem">
                <p><b>Elige un médico antes de seleccionar una fecha.</b></p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Cerrar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
    );
        }


    }

    async Task MostrarHorariosDisponibles()
    {

        if (nuevoTurno.FechaTurno != DateTime.MinValue)            
        {
            var result = await DialogService.OpenAsync("Elegir horario", ds =>
            @<RadzenStack Gap="1.5rem">
                <p><b>Horarios disponibles:</b></p>
                <RadzenStack Orientation="Orientation.Vertical" Gap="0.5rem">
                    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
                        <RadzenLabel Text="Seleccionar" Component="DropDownBindValue" />
                        <RadzenDropDown @bind-Value=@nuevoTurno.HoraTurno Data=@nuevoTurno.ObtenerHorariosDisponibles() Style="width: 30%; max-width: 400px;" Name="DropDownBindValue" />
                    </RadzenStack>
                    <br />
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End">
                        <RadzenButton Text="Reservar" Click="() => ds.Close(true)" />
                        <RadzenButton Text="Cancelar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
    );
        }
        else
        {
            var result = await DialogService.OpenAsync("Primero debes elegir una fecha", ds =>
            @<RadzenStack Gap="1.5rem">
                <p><b>Elige una fecha antes.</b></p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Cerrar" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
    );
        }


    }

    async Task MostrarConfirmacion()
    {

        if (nuevoTurno.NombrePaciente!="" && nuevoTurno.ApellidoPaciente !="" && nuevoTurno.Dni != null && nuevoTurno.Medico!="" && nuevoTurno.Cobertura!=null && nuevoTurno.FechaTurno!=DateTime.MinValue && nuevoTurno.HoraTurno!="")
        {
            string fechaMostrar = nuevoTurno.FechaTurno.ToString("yyyy-MM-dd");
            string query = "INSERT INTO `turnos-medicos`.`turnos`(`nombrePaciente`,`apellidoPaciente`,`dni`,`cobertura`,`medico`,`fechaTurno`,`horaTurno`,`notas`,`telefono`,`email`,`domicilio`)VALUES('" + nuevoTurno.NombrePaciente + "','" + nuevoTurno.ApellidoPaciente + "'," + nuevoTurno.Dni + ",'" + nuevoTurno.Cobertura + "','" + nuevoTurno.Medico + "','" + fechaMostrar + "','" + nuevoTurno.HoraTurno + "','" + nuevoTurno.Notas + "','" + nuevoTurno.Telefono + "','" + nuevoTurno.Email + "','" + nuevoTurno.Domicilio + "');";
            int intentoRegistrarTurno = Base.ConexionBase(query);



            if (intentoRegistrarTurno == 0)
            {
                var result = await DialogService.OpenAsync("Confirmacion de reserva", ds =>
            @<RadzenStack Gap="1.5rem">
                <p><b>¡Tu turno ha sido confirmado!</b></p>
                <p>Aquí están los datos de la reserva:</p>
                <p><b>Paciente:</b> @nuevoTurno.NombrePaciente</p>
                <p><b>Médico:</b> @nuevoTurno.Medico</p>
                <p><b>Fecha:</b> @fechaMostrar</p>
                <p><b>Hora:</b> @nuevoTurno.HoraTurno</p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.End" JustifyContent="JustifyContent.Center">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Cerrar" Click=@RedirectToHome />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);
            
                EmailService nuevoEmail = new EmailService();
                string cuerpoEmail = "Su turno ha sido confirmado con éxito.<br><br><b>Paciente:</b> " + nuevoTurno.NombrePaciente + " " + nuevoTurno.ApellidoPaciente + "<br> <b>Fecha:</b> " + nuevoTurno.FechaTurno.ToString("dd/MM/yyyy") + "<br> <b>Hora:</b> " + nuevoTurno.HoraTurno + "<br><b>Médico:</b> " + nuevoTurno.Medico + "<br><br><br> Si desea cancelarlo, puede hacerlo a través de nuestro portal o comunicandose telefonicamente. <br> Muchas gracias. <br><br> Consultorio médico.";

                await nuevoEmail.EnviarCorreoAsync("kevinnatalini@gmail.com", "Confirmación de turno", cuerpoEmail);

            }
        else
        {
            var resultadoNegativo = await DialogService.OpenAsync("Ha habido un error", ds =>
            @<RadzenStack Gap="1.5rem">
                <p><b>Tu turno no ha sido confirmado.</b></p>
                <p>Intentalo nuevamente.</p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.End" JustifyContent="JustifyContent.Center">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Cerrar" Click="() => ds.Close(true)" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
        );
        }
        }
        else
        {
            var err = await DialogService.OpenAsync("Ha habido un error", ds =>
            @<RadzenStack Gap="1.5rem">
                <p><b>Verifica que todos los campos estén completos.</b></p>
                <p>Intentalo nuevamente.</p>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.End" JustifyContent="JustifyContent.Center">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Cerrar" Click="() => ds.Close(true)" />
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>
                );
        }

        
        







        
    }
    
    void RedirectToHome()
    {
        Navigation.NavigateTo("/");
    }
    

    void Submit(Turno arg)
    {
       


    }

    void Cancelar()
    {
        Navigation.NavigateTo("/");
    }
}